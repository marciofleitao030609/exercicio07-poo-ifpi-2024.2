class Produto {
    private id: number;
    private descricao: string;
    private quantidade: number;
    private valorUnitario: number;
  
    constructor(id: number, descricao: string, quantidade: number, valorUnitario: number) {
      this.id = id;
      this.descricao = descricao;
      this.quantidade = quantidade;
      this.valorUnitario = valorUnitario;
    }
  
    public repor(quantidade: number): void {
      this.quantidade += quantidade;
    }
  
    public darBaixa(quantidade: number): void {
      if (this.quantidade >= quantidade) {
        this.quantidade -= quantidade;
      } else {
        throw new Error("Quantidade insuficiente em estoque.");
      }
    }
  
    public getId(): number {
      return this.id;
    }
  
    public getDescricao(): string {
      return this.descricao;
    }
  
    public getQuantidade(): number {
      return this.quantidade;
    }
  
    public getValorUnitario(): number {
      return this.valorUnitario;
    }
  }
  

  class ProdutoPerecivel extends Produto {
    private dataValidade: Date;
  
    constructor(id: number, descricao: string, quantidade: number, valorUnitario: number, dataValidade: Date) {
      super(id, descricao, quantidade, valorUnitario);
      this.dataValidade = dataValidade;
    }
  
    public isValido(): boolean {
      return this.dataValidade > new Date();
    }
  
    public override repor(quantidade: number): void {
      if (this.isValido()) {
        super.repor(quantidade);
      } else {
        throw new Error("Produto vencido. Não é possível repor estoque.");
      }
    }
  
    public override darBaixa(quantidade: number): void {
      if (this.isValido()) {
        super.darBaixa(quantidade);
      } else {
        throw new Error("Produto vencido. Não é possível dar baixa no estoque.");
      }
    }
  
    public getDataValidade(): Date {
      return this.dataValidade;
    }
  }
  

  class Estoque {
    private produtos: Produto[] = [];
  
    public existe(id: number, descricao: string): boolean {
      return this.produtos.some(
        (produto) => produto.getId() === id || produto.getDescricao() === descricao
      );
    }
  
    public incluir(produto: Produto): void {
      if (this.existe(produto.getId(), produto.getDescricao())) {
        throw new Error("Produto com o mesmo ID ou descrição já existe.");
      }
      this.produtos.push(produto);
    }
  
    public consultar(id: number): Produto | undefined {
      return this.produtos.find((produto) => produto.getId() === id);
    }
  
    public excluir(id: number): void {
      this.produtos = this.produtos.filter((produto) => produto.getId() !== id);
    }
  
    public repor(id: number, quantidade: number): void {
      const produto = this.consultar(id);
      if (!produto) {
        throw new Error("Produto não encontrado.");
      }
      produto.repor(quantidade);
    }
  
    public darBaixa(id: number, quantidade: number): void {
      const produto = this.consultar(id);
      if (!produto) {
        throw new Error("Produto não encontrado.");
      }
      produto.darBaixa(quantidade);
    }
  
    public listarProdutosPereciveisVencidos(): ProdutoPerecivel[] {
      return this.produtos.filter(
        (produto) =>
          produto instanceof ProdutoPerecivel &&
          !(produto as ProdutoPerecivel).isValido()
      ) as ProdutoPerecivel[];
    }
  }
  
  // EXEMPLO DE USO
  const estoque = new Estoque();
  
  const produto1 = new Produto(1, "Produto Não Perecível", 100, 10.0);
  const produto2 = new ProdutoPerecivel(2, "Leite", 50, 5.0, new Date("2025-01-01"));
  const produto3 = new ProdutoPerecivel(3, "Iogurte", 30, 3.5, new Date("2024-01-01"));
  
  estoque.incluir(produto1);
  estoque.incluir(produto2);
  estoque.incluir(produto3);
  
  console.log("Produtos vencidos:", estoque.listarProdutosPereciveisVencidos());
